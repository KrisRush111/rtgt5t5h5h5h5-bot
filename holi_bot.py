import asyncio
import aiohttp
import ssl
import certifi
import os
import threading
import http.server
import socketserver
from aiogram import Bot, Dispatcher, types, F
from aiogram.types import Message
from aiogram.filters import CommandStart
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.fsm.storage.memory import MemoryStorage

TOKEN = "7809691512:AAHmFFAGkXu34oW3IujqoTcTmiwzs66Hwe0"
SERVER_URL = "https://server-for-holi-ey6j.onrender.com/set_user"
MENU_URL = "https://krisrush111.github.io/Holiarus-10/menu.html"
MINI_APP_URL = "https://t.me/holiarus_bot/Holiarus"

bot = Bot(token=TOKEN)
dp = Dispatcher(storage=MemoryStorage())

def keep_alive():
    """–§–µ–π–∫–æ–≤—ã–π —Å–µ—Ä–≤–µ—Ä –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –Ω–∞ –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö —Ö–æ—Å—Ç–∏–Ω–≥–∞—Ö."""
    try:
        port = int(os.environ.get("PORT", 8080))
        handler = http.server.SimpleHTTPRequestHandler
        with socketserver.TCPServer(("", port), handler) as httpd:
            print(f"–§–µ–π–∫–æ–≤—ã–π —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É {port}")
            httpd.serve_forever()
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ keep_alive: {e}")

# –ó–∞–ø—É—Å–∫ —Ñ–µ–π–∫–æ–≤–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
threading.Thread(target=keep_alive, daemon=True).start()

async def send_user_data(user_id, user_name):
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ user_id –∏ user_name –Ω–∞ —Å–µ—Ä–≤–µ—Ä —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π SSL."""
    ssl_context = ssl.create_default_context(cafile=certifi.where())  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã
    async with aiohttp.ClientSession() as session:
        try:
            async with session.post(SERVER_URL, json={"user_id": str(user_id), "user_name": user_name}, ssl=ssl_context) as response:
                resp_json = await response.json()
                print("‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –Ω–∞ —Å–µ—Ä–≤–µ—Ä:", resp_json)
        except aiohttp.ClientConnectorCertificateError:
            print("‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º–∞ —Å SSL-—Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–º! –ü—Ä–æ–±—É–µ–º –±–µ–∑ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏...")
            async with session.post(SERVER_URL, json={"user_id": str(user_id), "user_name": user_name}, ssl=False) as response:
                resp_json = await response.json()
                print("‚úÖ –î–∞–Ω–Ω—ã–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã (–±–µ–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏ SSL):", resp_json)
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–∞ —Å–µ—Ä–≤–µ—Ä: {e}")

@dp.message(CommandStart())
async def cmd_start(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start ‚Äî –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç user_id –Ω–∞ —Å–µ—Ä–≤–µ—Ä –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –∑–∞–ø—É—Å—Ç–∏—Ç—å –∏–≥—Ä—É."""
    user_id = message.from_user.id
    user_name = message.from_user.first_name

    await send_user_data(user_id, user_name)  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä

    builder = InlineKeyboardBuilder()
    builder.button(text="–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª", url="https://t.me/holiarus")
    builder.button(text="–ò–≥—Ä–∞—Ç—å –≤ 1 –∫–ª–∏–∫ üêµ", url=MINI_APP_URL)  # –û—Ç–∫—Ä—ã–≤–∞–µ–º –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ Telegram
    builder.adjust(1)

    await message.answer(
        f'–ü—Ä–∏–≤–µ—Ç, {user_name}! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Holiarus üêµ.\n\n'
        '–¢–µ–ø–µ—Ä—å —Ç—ã ‚Äî —É—á–∞—Å—Ç–Ω–∏–∫ –∑–∞—Ö–≤–∞—Ç—ã–≤–∞—é—â–µ–≥–æ –ø—Ä—ã–∂–∫–æ–≤–æ–≥–æ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏—è! –ü—Ä—ã–≥–∞–π –ø–æ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞–º, –ø—Ä–µ–æ–¥–æ–ª–µ–≤–∞–π '
        '–ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏—è –∏ –æ—Å–≤–∞–∏–≤–∞–π –Ω–æ–≤—ã–µ –Ω–∞–≤—ã–∫–∏. –ò–≥—Ä–∞ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –∞–∫—Ç–∏–≤–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ, –∏ –º—ã –æ—Ü–µ–Ω–∏–º —Ç–≤–æ–∏ —É—Å–ø–µ—Ö–∏ '
        '–≤ –±—É–¥—É—â–∏—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è—Ö.\n\n'
        '–ó–æ–≤–∏ –¥—Ä—É–∑–µ–π ‚Äî –≤–º–µ—Å—Ç–µ –≤—ã —Å–º–æ–∂–µ—Ç–µ –¥–æ–±–∏—Ç—å—Å—è –µ—â—ë –±–æ–ª—å—à–∏—Ö –≤—ã—Å–æ—Ç!\n\n',
        reply_markup=builder.as_markup(),
        parse_mode="Markdown"
    )

@dp.message(F.text == '/help')
async def help_cmd(message: types.Message):
    """–û—Ç–≤–µ—Ç –Ω–∞ –∫–æ–º–∞–Ω–¥—É /help."""
    await message.answer('–ò–≥—Ä–∞ –Ω–∞ —Å—Ç–∞–¥–∏–∏ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏, –≤–æ–∑–º–æ–∂–Ω—ã —Å–±–æ–∏ –∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –≥–µ–π–º–ø–ª–µ–µ. –ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –∑–∞ –ø–æ–Ω–∏–º–∞–Ω–∏–µ! ü´†')

@dp.message(F.text)
async def unknown_command(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∫–æ–º–∞–Ω–¥."""
    await message.answer('–í—ã –≤–≤–µ–ª–∏ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—É—é –∫–æ–º–∞–Ω–¥—É')

async def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞."""
    await bot.delete_webhook(drop_pending_updates=True)
    await dp.start_polling(bot)

if __name__ == '__main__':
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print('‚ùå –ë–æ—Ç –≤—ã–∫–ª—é—á–µ–Ω')
